import React, { useEffect, useState } from 'react';
import axios from 'axios';
import '../CSS/ShowEquipment.css';

const ShowEquipment = () => {
  const [equipments, setEquipments] = useState([]);
  const [filteredEquipments, setFilteredEquipments] = useState([]);
  const [serialTypes, setSerialTypes] = useState([]); // Store serial types
  const [selectedCategory, setSelectedCategory] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  const [searchTerm, setSearchTerm] = useState(''); // State for the search bar
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingEquipment, setEditingEquipment] = useState(null);
  const [historyData, setHistoryData] = useState(null);
  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
  const [selectedEquipmentId, setSelectedEquipmentId] = useState(null);
  const [newDefect, setNewDefect] = useState({
    defect_details: '',
    image: null,
    imagePreview: null,
  });
  useEffect(() => {
    console.log("üîÑ selectedEquipmentId updated:", selectedEquipmentId);
  }, [selectedEquipmentId]);
  

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category: '',
    status: '',
    type_id: '',
    image: null,
    imagePreview: null,
  });

  // Pagination states
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  
  useEffect(() => {
    axios.get(`http://localhost:3333/showequipment?category=${selectedCategory}`)
      .then((response) => {
        setEquipments(response.data);
        setFilteredEquipments(response.data);
      })
      .catch((error) => {
        console.error(error);
      });

    // Fetch serial types from the API
    axios.get('http://localhost:3333/api/serialtypes')
      .then((response) => {
        setSerialTypes(response.data);
      })
      .catch((error) => {
        console.error('Error fetching serial types:', error);
      });
  }, [selectedCategory]);

  const getSerialTypeName = (typeId) => {
    const type = serialTypes.find((serialType) => serialType.type_id === typeId);
    return type ? type.type_serial : 'Unknown';
  };

  const handleSearch = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchTerm(value);
    const filtered = equipments.filter(
      (equipment) =>
        equipment.name.toLowerCase().includes(value) ||
        equipment.description.toLowerCase().includes(value)
    );
    setFilteredEquipments(filtered);
  };

  const handleUpdateClick = (equipment) => {
    setEditingEquipment(equipment);
    setFormData({
      name: equipment.name,
      description: equipment.description,
      category: equipment.category,
      status: equipment.status,
      type_id: equipment.type_id,
      image: null,
    });
    setIsModalOpen(true);
  };

  const handleFormChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      const file = files[0];
      setFormData((prev) => ({
        ...prev,
        image: file,
        imagePreview: URL.createObjectURL(file),
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    
    const updateData = new FormData();
    updateData.append('name', formData.name);
    updateData.append('description', formData.description);
    updateData.append('category', formData.category);
    updateData.append('status', formData.status);
    updateData.append('type_id', formData.type_id);
  
    if (formData.image) {
      updateData.append('image', formData.image); // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    }
  
    console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", [...updateData.entries()]); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
  
    axios.put(`http://localhost:3333/api/equipments/${editingEquipment.equipment_id}`, updateData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    })
      .then((response) => {
        console.log('‚úÖ Update success:', response.data);
        setIsModalOpen(false);
      })
      .catch((error) => {
        console.error('‚ùå Error updating equipment:', error);
      });
  };
  

  const handleDeleteClick = (id) => {
    axios.delete(`http://localhost:3333/api/equipments/${id}`)
      .then(() => {
        setEquipments(equipments.filter((item) => item.equipment_id !== id));
        setFilteredEquipments(filteredEquipments.filter((item) => item.equipment_id !== id));
      })
      .catch((error) => {
        console.error('Error deleting equipment:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
      });
  };
  
  const fetchDefectReports = (equipmentId) => {
    console.log(`üì¢ Fetching defect reports for equipment ID: ${equipmentId}`);
  
    setSelectedEquipmentId(equipmentId); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ ID ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô
    console.log(`‚úÖ Set selectedEquipmentId: ${equipmentId}`);
  
    setTimeout(() => { // ‚úÖ ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ state ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      axios.get(`http://localhost:3333/api/defect-reports/${equipmentId}`)
        .then((response) => {
          console.log('‚úÖ Defect Reports Data:', response.data);
          setHistoryData(response.data);
          setIsHistoryModalOpen(true);
        })
        .catch((error) => {
          console.error('‚ùå Error fetching defect reports:', error);
          setHistoryData([]);
          setIsHistoryModalOpen(true);
        });
    }, 50);
  };
  
  
  
  
  const handleDefectFormChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      const file = files[0];
      setNewDefect((prev) => ({
        ...prev,
        image: file,
        imagePreview: URL.createObjectURL(file),
      }));
    } else {
      setNewDefect((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleDefectSubmit = (e) => {
    e.preventDefault();
  
    if (!selectedEquipmentId) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡∏´‡∏ô‡∏¥!");
      return;
    }
  
    const defectData = new FormData();
    defectData.append("equipment_id", selectedEquipmentId);
    defectData.append("defect_details", newDefect.defect_details);
    if (newDefect.image) {
      defectData.append("image", newDefect.image); // ‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á defect_images
    }
  
    axios
      .post("http://localhost:3333/api/defect-reports", defectData, {
        headers: { "Content-Type": "multipart/form-data" },
      })
      .then((response) => {
        setHistoryData([...historyData, response.data]);
        setNewDefect({ defect_details: "", image: null, imagePreview: null });
      })
      .catch((error) => {
        console.error("‚ùå Error inserting defect report:", error);
      });
  };
  
  
  
  
  

  const handleDeleteDefect = (reportId) => {
    console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏ó‡∏µ‡πà report_id: ${reportId}`); // Debugging
  
    if (!window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏ô‡∏µ‡πâ?")) return;
  
    axios.delete(`http://localhost:3333/api/defect-reports/${reportId}`)
      .then((response) => {
        console.log(`‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${response.data.message}`);
  
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        setHistoryData(prevHistory => prevHistory.filter((report) => report.report_id !== reportId));
      })
      .catch((error) => {
        console.error('‚ùå Error deleting defect report:', error);
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡πÑ‡∏î‡πâ');
      });
  };
  
  

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentEquipments = filteredEquipments.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredEquipments.length / itemsPerPage);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div className="equipment-containerAdmin">
      <h1>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h1>

      {/* Search bar */}
      <div className="search-bar-custom">
        <div className="search-input-container-custom">
          <i className="fas fa-search search-icon-custom"></i>
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
            value={searchTerm}
            onChange={handleSearch}
            className="search-input-custom-admin "
          />
        </div>
      </div>

      <div className="category-buttons">
        {['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡πÄ‡∏•‡∏ô‡∏™‡πå', '‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡πÑ‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ'].map((category) => (
          <button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className="category-btn"
          >
            {category}
          </button>
        ))}
      </div>

      <ul className="equipment-listAdmin">
        {currentEquipments.map((item) => (
          <li key={item.equipment_id} className="equipment-item">
            <img
              src={`http://localhost:3333/uploads/${item.image}`}
              alt={item.name}
              className="equipment-info-img-1"
            />
            <div className="equipment-info-Showtext">
              <h2>{item.name}</h2>
              <p><span>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</span> {item.description}</p>
              <p><span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span> {item.status}</p>
              <p><span>‡∏£‡∏´‡∏±‡∏™‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</span> {getSerialTypeName(item.type_id)}</p>
            </div>
            <div className="equipment-actions">
              <button onClick={() => handleUpdateClick(item)} className="update-btn">Update</button>
              <button onClick={() => handleDeleteClick(item.equipment_id)} className="delete-btn">Delete</button>
              <button onClick={() => fetchDefectReports(item.equipment_id)} className="history-btn">‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≥‡∏´‡∏ô‡∏¥</button>
            </div>
          </li>
        ))}
      </ul>

      {/* Pagination buttons */}
      <div className="pagination-showeq">
        {[...Array(totalPages).keys()].map((number) => (
          <button
            key={number + 1}
            onClick={() => handlePageChange(number + 1)}
            className={currentPage === number + 1 ? 'active' : ''}
          >
            {number + 1}
          </button>
        ))}
      </div>

      {isModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h2>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
            <form onSubmit={handleFormSubmit}>
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
  <input type="text" name="name" value={formData.name} onChange={handleFormChange} required />

  <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
  <textarea name="description" value={formData.description} onChange={handleFormChange} required />

  <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</label>
  <select name="category" value={formData.category} onChange={handleFormChange} required>
    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
    <option value="‡∏Å‡∏•‡πâ‡∏≠‡∏á">‡∏Å‡∏•‡πâ‡∏≠‡∏á</option>
    <option value="‡πÄ‡∏•‡∏ô‡∏™‡πå">‡πÄ‡∏•‡∏ô‡∏™‡πå</option>
    <option value="‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á">‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á</option>
    <option value="‡πÑ‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥">‡πÑ‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥</option>
    <option value="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á</option>
    <option value="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á</option>
    <option value="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
  </select>

  {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û */}
  <label>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û:</label>
  <input type="file" name="image" accept="image/*" onChange={handleFormChange} />

  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° */}
  {formData.imagePreview ? (
    <img src={formData.imagePreview} alt="Preview" className="image-preview" />
  ) : (
    editingEquipment?.image && (
      <img src={`http://localhost:3333/uploads/${editingEquipment.image}`} alt="Existing" className="image-preview" />
    )
  )}

  <button type="submit" className="save-btn">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
  <button type="button" onClick={() => setIsModalOpen(false)} className="cancel-btn">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
</form>
          </div>
        </div>
      )}

{isHistoryModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h2>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>

            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡∏´‡∏ô‡∏¥ */}
            <form onSubmit={handleDefectSubmit}>
              <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≥‡∏´‡∏ô‡∏¥:</label>
              <input type="text" name="defect_details" value={newDefect.defect_details} onChange={handleDefectFormChange} required />

              <label>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:</label>
              <input type="file" name="image" accept="image/*" onChange={handleDefectFormChange} />
              {newDefect.imagePreview && <img src={newDefect.imagePreview} alt="Preview" className="image-preview" />}

              <button type="submit" className="save-btn">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡∏´‡∏ô‡∏¥</button>
            </form>

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏´‡∏ô‡∏¥ */}
            {historyData.length > 0 ? (
              <table className="defect-table">
                <thead>
                  <tr>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</th>
                    <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≥‡∏´‡∏ô‡∏¥</th>
                    <th>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
                    <th>‡∏•‡∏ö</th>
                  </tr>
                </thead>
                <tbody>
                  {historyData.map((report) => (
                    <tr key={report.report_id}>
                      <td>{new Date(report.created_at).toLocaleDateString('th-TH')}</td>
                      <td>{report.defect_details}</td>
                      <td>
                        {report.image_paths && report.image_paths.length > 0 ? (
                          <img src={`http://localhost:3333/uploads/${report.image_paths[0]}`} alt="‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå" className="defect-img" />
                        ) : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û"}
                      </td>
                      <td>
                        <button onClick={() => handleDeleteDefect(report.report_id)} className="delete-btn">‡∏•‡∏ö</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</p>
            )}

            <button onClick={() => setIsHistoryModalOpen(false)} className="close-btn">‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ShowEquipment;